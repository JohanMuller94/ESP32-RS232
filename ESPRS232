esphome:
  name: "esp32rs232"
  friendly_name: Esp32RS232

esp32:
  board: esp32dev
  framework:
    type: arduino
  


logger:
  level: VERBOSE

api:
  encryption:
    key: "INSERT NEW KEY HERE"
  on_client_connected:
    then:
      - lambda: |-
          ESP_LOGD("API", "Connected to Home Assistant API.");
          id(on_command).publish_state(id(on_command_stored).c_str());
          id(off_command).publish_state(id(off_command_stored).c_str());
          id(fb_command).publish_state(id(fb_command_stored).c_str());
          id(fb_answer_on).publish_state(id(fb_answer_on_stored).c_str());
          id(fb_answer_off).publish_state(id(fb_answer_off_stored).c_str());
          ESP_LOGD("API", "Updated text sensors with global values.");
ota:

globals:
  - id: on_command_stored
    type: std::string
    restore_value: yes
  - id: off_command_stored
    type: std::string
    restore_value: yes
  - id: fb_command_stored
    type: std::string
    restore_value: yes
  - id: fb_answer_on_stored
    type: std::string
    restore_value: yes
  - id: fb_answer_off_stored
    type: std::string
    restore_value: yes

captive_portal:

uart:
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600
  stop_bits: 1 
  data_bits: 8
  parity: NONE
  id: UART3
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r"
    sequence:
      - lambda: |-
          // Add logging for received string
          UARTDebug::log_string(direction, bytes);
          std::string str(bytes.begin(), bytes.end());
          ESP_LOGD("UART", "Received: %s", str.c_str());
          
          if (str == id(fb_answer_on_stored)) {
            id(power_switch).turn_on();
          } else if (str == id(fb_answer_off_stored)) {
            id(power_switch).turn_off();
          }
switch:
  - platform: template
    name: "1. Power"
    id: power_switch
    turn_on_action:
      - logger.log: "Switch turned ON"
      - lambda: |-
          id(power_switch).publish_state(true);
      - uart.write: !lambda |-
          return std::vector<unsigned char>(id(on_command_stored).begin(), id(on_command_stored).end());
    turn_off_action:
      - logger.log: "Switch turned OFF"
      - lambda: |-
          id(power_switch).publish_state(false);
      - uart.write: !lambda |-
          return std::vector<unsigned char>(id(off_command_stored).begin(), id(off_command_stored).end());

  - platform: template
    name: "2. Feedback"
    icon: mdi:help-circle-outline
    id: feedback_on_off
    optimistic: True

interval:
  - interval: 10s
    then:
      - if:
          condition:
            lambda: "return id(feedback_on_off).state == true;"
          then:
            - uart.write: !lambda |-
                std::vector<unsigned char> data(id(fb_command_stored).c_str(), id(fb_command_stored).c_str() + id(fb_command_stored).length());
                return data;

binary_sensor:
  - platform: template
    name: "Unsaved Text fields"
    id: unsaved_changes
    device_class: "update"

text:

  - platform: template
    id: on_command
    name: "3. Power On"
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    on_value:
      then:
        - lambda: |-
            id(unsaved_changes).publish_state(id(on_command).state != id(on_command_stored));

  - platform: template
    id: off_command
    name: "4. Power Off"
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    on_value:
      then:
        - lambda: |-
            id(unsaved_changes).publish_state(id(off_command).state != id(off_command_stored));

  - platform: template
    id: fb_command
    name: "5. Feedback"
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    on_value:
      then:
        - lambda: |-
            id(unsaved_changes).publish_state(id(fb_command).state != id(fb_command_stored));

  - platform: template
    id: fb_answer_on
    name: "6. Answer On"
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    on_value:
      then:
        - lambda: |-
            id(unsaved_changes).publish_state(id(fb_answer_on).state != id(fb_answer_on_stored));

  - platform: template
    id: fb_answer_off
    name: "7. Answer Off"
    optimistic: true
    min_length: 0
    max_length: 100
    mode: text
    on_value:
      then:
        - lambda: |-
            id(unsaved_changes).publish_state(id(fb_answer_off).state != id(fb_answer_off_stored));

button:
  - platform: template
    name: "8. Save Commands"
    on_press:
      then:
        - lambda: |-
              id(on_command_stored) = id(on_command).state;
              id(off_command_stored) = id(off_command).state;
              id(fb_command_stored) = id(fb_command).state;
              id(fb_answer_on_stored) = id(fb_answer_on).state;
              id(fb_answer_off_stored) = id(fb_answer_off).state;
              id(unsaved_changes).publish_state(true);
              id(on_command).publish_state(id(on_command_stored).c_str());
              id(off_command).publish_state(id(off_command_stored).c_str());
              id(fb_command).publish_state(id(fb_command_stored).c_str());
              id(fb_answer_on).publish_state(id(fb_answer_on_stored).c_str());
              id(fb_answer_off).publish_state(id(fb_answer_off_stored).c_str());
              ESP_LOGD("Manual Trigger", "Updated text sensors with global values.");

  - platform: template
    name: "9. Update Text Fields"
    on_press:
      then:
        - lambda: |-
            id(on_command).publish_state(id(on_command_stored).c_str());
            id(off_command).publish_state(id(off_command_stored).c_str());
            id(fb_command).publish_state(id(fb_command_stored).c_str());
            id(fb_answer_on).publish_state(id(fb_answer_on_stored).c_str());
            id(fb_answer_off).publish_state(id(fb_answer_off_stored).c_str());
            ESP_LOGD("Manual Trigger", "Updated text sensors with global values.");
